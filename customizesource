#!/bin/bash

#########USAGE FOR AUTOBUILDBLOCKCHAIN #########
#You must provide the full path to the clone nubits repo as the first parameter
#You must update the variable values below this section with the values that are to be substituted into the source code

#STATIC SOURCE VARS - This section is where you will put the existing values from the source. Meaning, The values that we are searching for in the code to replace
srcHashGenesisBlockOfficial="static const uint256 hashGenesisBlockOfficial("
srcOfficialNonce="        unsigned int nNonceGenesis="
srcTimeGenesisOfficial="        unsigned int nTimeGenesis="
srcPszTimestampOfficial=" pszTimestamp = "
srcMerkleRootOfficial="5f6d3c86c39f07715fb73cc5cf3a8a11a59f4e6b77547675f519a4a5d11f4a1a"
srcV3Switch="unsigned int nProtocolV03SwitchTime     = 1405987200; // Tue, 22 Jul 2014 00:00:00 GMT"
srcV4Switch="unsigned int nProtocolV04SwitchTime     = 1406030400; // Tue, 22 Jul 2014 12:00:00 GMT"
srcWeightFix="unsigned int nWeightFixSwitchTime = 1408924800; // 2014-08-25 00:00:00 UTC"
srcDifficulty="    if (CBigNum(hashProofOfStake) > bnCoinDayWeight \* bnTargetPerCoinDay)"
srcChecsumCheckoint="    if (fTestNet) return true; // Testnet has no checkpoints"
srcReduceDiff="static CBigNum bnProofOfWorkLimit(~uint256(0) >> 20);"
srcReduceDiff2="static CBigNum bnInitialHashTarget(~uint256(0) >> 24);"


srcDataDir="    return pathRet / \".bcexchange\";"
newDataDir="    return pathRet / \".bceTESTING\";"


#Seting some predefined variables to use later
RegularTimeSwitch=$(date --date='1 day'  --utc)
EpochTimeSwitch=$(date +%s --date='1 day')
RegularTime=$(date)
EpochTime=$(date +%s)
CurDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#Get a big ass random string
RandomString=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
pzTimeStamp="$RegularTime $RandomString"


echo $pzTimeStamp

#take in the location to the source as parameter"
src=$1/src
if [ -z "$1" ]; then 
echo "please provide path to folder as parameter" && exit 
fi #END PATH CHECK

#change working directory to source folder
cd "$src"

echo \##########################################
echo \########Creating New Genesis Block########
echo \##########################################
sed -i -e "s@$srcPszTimestampOfficial.*@ pszTimestamp = \"$pzTimeStamp\";@" \
-e "s@$srcTimeGenesisOfficial.*@        unsigned int nTimeGenesis=$EpochTime;@" \
-e "s@$srcOfficialNonce.*@        unsigned int nNonceGenesis=0;@" main.cpp

sed -i -e "s@.*$srcDataDir.*@$newDataDir@" util.cpp

make -f makefile.unix USE_UPNP=-

#Create the conf file with the rpcuser and rpcpasswords set

rm -rf ~/.bceTESTING

mkdir -p ~/.bceTESTING
cd ~/.bceTESTING
touch bcexchange.conf
echo rpcuser=safasfasdf >> bcexchange.conf
echo rpcpassword=asdfasdfadsf >> bcexchange.conf

cd "$src"

./bcexchanged --daemon &

sleep 15

#read -p "Start parsing debug"

#Parsing debug logs for needed strings
cd ~/.bceTESTING

#Genesis Hash
officialGenHash=$(cat debug.log | grep "genesis hash")
IFS='=' read -a OffGenHash <<< "$officialGenHash"
genHashString="${OffGenHash[1]}"

#Nonce
officialNonce=$(cat debug.log | grep "nNonce")
IFS=',' read -a OffNonce <<< "$officialNonce"
IFS='=' read -a OffNonce2 <<< "${OffNonce[6]}"
NonceString="${OffNonce2[1]}"

#Merkle Root
officialMerkleRoot=$(cat debug.log | grep "merkle root")
IFS='=' read -a OffMerkRoot <<< "$officialMerkleRoot"
merkRootString="${OffMerkRoot[1]}"


echo "MerkleRoot= $merkRootString"
echo "GenHashString= $genHashString"
echo "NonceString= $NonceString"

#read -p "Start parsing debug"

#Completed parsing debug - begin substitution

cd "$src"

sed -i -e "s@.*$srcHashGenesisBlockOfficial.*@static const uint256 hashGenesisBlockOfficial(\"$genHashString\");@" main.h

sed -i -e "s@.*$srcDataDir.*@$newDataDir@" util.cpp

sed -i -e "s@.*$srcPszTimestampOfficial.*@        const char* pszTimestamp = \"$pzTimeStamp\";@" \
-e "s@.*$srcOfficialNonce.*@        unsigned int nNonceGenesis=$NonceString;@" \
-e "s@.*$srcTimeGenesisOfficial.*@        unsigned int nTimeGenesis=$EpochTime;@" \
-e "s@assert(block.hashMerkleRoot == uint256(\"0x$srcMerkleRootOfficial\"));@assert(block.hashMerkleRoot == uint256(\"0x$merkRootString\"));@" \
-e "s@.*$srcReduceDiff.*@static CBigNum bnProofOfWorkLimit(~uint256(0) >> 13);@" \
-e "s@.*$srcReduceDiff2.*@static CBigNum bnInitialHashTarget(~uint256(0) >> 19);@" main.cpp

sed -i -e "s@.*$srcV3Switch.*@unsigned int nProtocolV03SwitchTime     = $EpochTimeSwitch;@" \
-e "s@.*$srcV4Switch.*@unsigned int nProtocolV04SwitchTime     = $EpochTimeSwitch;@" \
-e "s@.*$srcChecsumCheckoint.*@    return true;@" \
-e "s@.*$srcDifficulty.*@    if ((CBigNum(hashProofOfStake) >> 10) > bnCoinDayWeight \* bnTargetPerCoinDay)@" \
-e "s@.*$srcWeightFix.*@unsigned int nWeightFixSwitchTime = $EpochTimeSwitch;@" kernel.cpp


#read -p "Start compile of customized binaries"

make -f makefile.unix USE_UPNP=-

cp -rf bcexchanged $CurDir

cd ..

qmake

make USE_UPNP=-

cp -rf bcexchange $CurDir

rm -rf ~/.bceTESTING

cd $CurDir

./buildcontainer
./startcontainer

./nu

echo "MerkleRoot= $merkRootString"
echo "GenHashString= $genHashString"
echo "NonceString= $NonceString"









